import React, { useEffect, useState } from 'react';
import { Text, View, StyleSheet, TouchableOpacity, TextInput, FlatList, KeyboardAvoidingView, Platform } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { getUid, addDoc, db, collection, getDocs, where, query, updateDoc } from '../Firebase';
import { ScrollView } from 'react-native-gesture-handler';

export default function Diario({ route }) {

  const [array, setArray] = useState([]);
  const [notaVisivel, setnotaVisivel] = useState(false);
  const [registro, setRegistro] = useState('');
  const [sentimento, setSentimento] = useState('');
  const [uid, setUid] = useState(''); //id do usuario
  const [pontos, setPontos] = useState(0);

  getUid().then((uid) => {
    setUid(uid);
  }).catch((error) => {
    console.error('ERRO:', error)
  });

  const data = () => {
    let dia = new Date().getDate();
    let mes = new Date().getMonth() + 1;
    let ano = new Date().getFullYear();

    return (
      `${dia}-${mes}-${ano}`
    );
  }

  getUid().then((uid) => {
    setUid(uid);
  }).catch((error) => {
    console.error('ERRO:', error)
  })
  

  const toggleNota = () => {
    setnotaVisivel((prevState) => !prevState);
  };

  const getDiario = async () => {
    if (uid) {
      try {
        const q = query(collection(db, 'diario'), where('uid', '==', uid)); // Query com where
        const querySnapshot = await getDocs(q);
        const docs = [];
        querySnapshot.forEach((doc) => {
          docs.push({ id: doc.id, ...doc.data() });
        });

        console.log(docs);
        setArray(docs);
      } catch (error) {
        console.error('Error fetching diario:', error);
      };
    }
  }

  useEffect(() => {
    getDiario();
    setEmocao();
  }, [sentimento, uid]);

  const setEmocao = () => {
    if (route.params == undefined) {
      route.params = [
      {
        "emocao": "neutro",
        "pontos": 0
      }]
    }
    else if (route.params.emocao || route.params.pontos) {
      console.log(route.params);
      setSentimento(route.params.emocao);
      setPontos(route.params.pontos);
    }
  }

  const add = async () => {
    try {
      const docRef = await addDoc(collection(db, "diario"), {
        uid: uid,
        sentimento: sentimento,
        registro: registro,
        data: data()
      });
      console.log("Documento registrado com ID: ", docRef.id);
      passUpdate();
      setRegistro("");
      toggleNota();
      getDiario();
      setSentimento('Neutro');
      setPontos(0);
    } catch (e) {
      console.error("Erro ao adicionar documento: ", e);
    }
  }

  const passUpdate = async () => {
    try {
      const q = query(collection(db, "passe"), where("uid", "==", "P36wSVAvbXQdPqiTnWfB6z4VYfr1"));
      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        querySnapshot.forEach((doc) => {

          let data = ({...doc.data()});
          console.log(data);

          let updates = {
            pontuacao: (data.pontuacao + pontos),
            xp: (data.xp + 10)
          }
          const documentRef = doc.ref;
          updateDoc(documentRef, updates);
        });
        console.log('Documents updated successfully.');
      } else {
        console.log('No matching documents found.');
      }
    } catch (error) {
      console.error('Error updating documents:', error);
    }
  }

  return (
    <SafeAreaView style={styles.container}>

      <View style={[styles.containerFundoNotas, { zIndex: 1, position: 'relative' }]}>

        <View style={styles.viewTitle}>
          <Text style={styles.textTitle}>
            Aqui vocÃª pode escrever sobre seus sentimentos e pensamentos.
          </Text>
        </View>

        {/*/// CODIGO DO GUSTAVO PARA SALVAR OS DADOS DENTRO DO APP */}

        <View style={styles.blocoNota}>

          <View style={[styles.btnAddNota, {zIndex: 1}]}>

            {!notaVisivel && (
              <TouchableOpacity onPress={() => {setEmocao(); toggleNota()}} >

                <View style={styles.btnNota}>
                  <Text style={{ fontSize: 20, paddingHorizontal: 10 }}>+</Text>
                </View>
              </TouchableOpacity>

            )}

          </View>

          {notaVisivel && (
            
            <KeyboardAvoidingView
            behavior={Platform.OS == "android" ? "padding" : "height"}
            style={[styles.containerFrontal, { zIndex: 2, elevation: 30, position: 'relative'}]}
            keyboardVerticalOffset={50}
            >

              <ScrollView style={{width: '100%'}}>
              <View style={styles.notaTitle}>
              <Text style={styles.areaTexto}>Voce esta se sentindo "{sentimento}" escreva aqui o que aconteceu no seu dia.</Text>
              </View>
              <TextInput
                multiline={true}
                numberOfLines={10}
                placeholderTextColor={'#fff'}
                style={styles.textoInputNota}
                placeholder="Digite aqui"
                onChangeText={setRegistro}
                defaultValue={registro}
                value={registro}
              />
                <View style={styles.containerBtn}>

                <TouchableOpacity 
                style={styles.btnVoltar}
                onPress={() => setnotaVisivel(false)} 
                >
                  <Text> Voltar</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={styles.btnSalvar}
                  onPress={add}
                >
                  <Text style={{color: '#ffff', fontSize: 20}}>Salvar</Text>
                </TouchableOpacity>

                </View>

            </ScrollView>
            </KeyboardAvoidingView>

          )}

        <View style={styles.notas}>

            { 
            array.length < 1 ?

              <View style={styles.notaSalva}>
              <Text>
                Nenhum registro encontrado
              </Text>
              </View>

                :

              <FlatList
              data={array}
              renderItem={({ item }) => (
                <View style={styles.notaSalva}>
                  <Text>Texto: {item.registro}</Text>
                  <Text>Sentimento: {item.sentimento}</Text>
                  <Text>Data: {item.data}</Text>
                  
                </View>
              )}
            />
            }

          
          </View>

          

        </View>

      </View>

          

    </SafeAreaView>
  );

}


const styles = StyleSheet.create({

  //fundo da tela
  container: {
    flex: 1,
    paddingHorizontal: 6,
    backgroundColor: '#ffff', 
  },

  //container do titulo, notas e botao criar notas
  containerFundoNotas: {
    justifyContent: 'space-evenly',
    backgroundColor: '#dcdcdc',
    borderRadius: 15,
  },

  //viewtitulo
  viewTitle: {
    zIndex: 1,
    pading: 4,
    margin: 6,
    borderRadius: 8,
    backgroundColor: '#ffffff',
    elevation: 2
  },

  textTitle: { //estilo das frases encima das notas e eventos.
    zIndex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    borderRadius: 10,
    textAlign: 'center'
  },
  ////
  
  textoinput: {
    flexShrink: 1,
    backgroundColor: 'rgba(63, 191, 129, 0.88)',
    color: '#fff',
    fontSize: 20,
    fontWeight: 'bold',
    borderRadius: 10,
    margin: 6,
    padding: 6,
    textAlignVertical: 'top'
  },

  notas: {
    margin: 6,
    borderRadius: 2,
  },

  notaSalva: {
    margin: 6,
    alignItems: 'center',
    backgroundColor: '#dcdcdc',
    elevation: 8 //sombras
  },

  btnAddNota: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-evenly',
    margin: 6,
    borderRadius: 2,
    backgroundColor: '#DCDCDC',
  },


  containerFrontal: {
    borderRadius: 10,
    backgroundColor: '#6CB1F1',  
  },

  addNota: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-evenly',
    margin: 6,
    borderRadius: 2,
    backgroundColor: '#DCDCDC',
  },

  areaTexto: {
    fontSize: 16,
    padding: 6,
    textAlign: 'center'
  },

  btnNota: {
    flexWrap: 'wrap',
    backgroundColor: '#ffff',
    padding: 6,
    margin: 6
  },

  containerBtn: {
    flexDirection: 'row', 
    alignSelf: 'flex-end',
  },

  btnSalvar: {
    borderRadius: 10,
    backgroundColor: '#FE7200',
    margin: 3,
    padding: 6,
  },

  btnVoltar: {
    borderRadius: 10,
    backgroundColor: '#ffff',
    padding: 8,
    margin: 6
  },

  notaTitle: {
    pading: 4,
    margin: 6,
    borderRadius: 8,
    backgroundColor: '#ffff',
    elevation: 2
  },

  textoInputNota: {
    flexShrink: 1,
    backgroundColor: '#FFF',
    color: '#000',
    fontSize: 20,
    fontWeight: 'bold',
    borderRadius: 10,
    margin: 6,
    padding: 6,
    textAlignVertical: 'top'
  },
});
